import dependencies.AnnotationProcessing
import dependencies.Application
import dependencies.AndroidTestDependencies
import dependencies.Dependencies
import dependencies.Java
import dependencies.SupportDependencies
import dependencies.TestDependencies
import dependencies.Versions

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId Application.APP_ID
        minSdkVersion Versions.MIN_SDK_VERSION
        targetSdkVersion Versions.TARGET_SDK_VERSION
        versionCode Application.VERSION_CODE
        versionName Application.VERSION_NAME
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = Java.JAVA_VERSION
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/gradle/incremental.annotation.processors'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    buildFeatures {
        dataBinding = true
    }
    androidExtensions {
        experimental = true
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // AndroidX
    implementation SupportDependencies.LEGACY_SUPPORT

    // Kotlin
    implementation Dependencies.KOTLIN_STANDARD_LIBRARY
    implementation Dependencies.KTX
    implementation Dependencies.KOTLIN_REFLECT

    // Support
    implementation SupportDependencies.APP_COMPAT
    implementation SupportDependencies.CONSTRAINT_LAYOUT
    implementation SupportDependencies.MATERIAL_DESIGN

    // Test
    implementation AndroidTestDependencies.ANDROIDX_TEST_EXT
    implementation AndroidTestDependencies.ESPRESSO_CORE
    implementation TestDependencies.JUNIT4

    // Hilt
    implementation Dependencies.HILT_ANDROID
    kapt Dependencies.HILT_ANDROID_COMPILTER

    // Hilt ViewModel
    implementation Dependencies.HILT_VIEWMODEL
    kapt Dependencies.HILT_COMPILTER

    // Fragment
    implementation Dependencies.FRAGMENT_KTX

    // Room
    implementation Dependencies.ROOM_RUNTIME
    kapt AnnotationProcessing.ROOM_COMPILER
    implementation Dependencies.ROOM_KTX
    //implementation Dependencies.ROOM_ALL

    // Retrofit
    implementation Dependencies.RETROFIT
    implementation Dependencies.RETROFIT_GSON
    implementation Dependencies.RETROFIT_MOSHI

    // Moshi
    implementation Dependencies.MOSHI
    implementation Dependencies.MOSHI_KOTLIN

    // Coroutines
    implementation Dependencies.KOTLIN_COROUTINES
    implementation Dependencies.KOTLIN_COROUTINES_ANDROID

    // Navigation
    implementation Dependencies.NAVIGATION_FRAGMENT
    implementation Dependencies.NAVIGATION_UI
    implementation Dependencies.NAVIGATION_RUNTIME

    // Glide
    implementation Dependencies.GLIDE
    implementation Dependencies.GLIDE_COMPILER

    // Material dialogs
    implementation Dependencies.MATERIAL_DIALOGS
    implementation Dependencies.MATERIAL_DIALOGS_INPUT

}

